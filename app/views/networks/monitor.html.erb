<h1>Network Monitor <%= @network.name %></h1>
<p>
  The monitor has created a temporary device on your network which will be automatically removed after a period of inactivity. Refresh this page if it stops working.
</p>
<table id='monitor_table' class='table'>
  <thead>
    <tr>
      <th>Source</th>
      <th>DDC</th>
      <th>Timestamp</th>
      <th>Message</th>
    </tr>
  </thead>
  <tbody>
  </tbody>
</table>
<script src='https://cdnjs.cloudflare.com/ajax/libs/paho-mqtt/1.1.0/paho-mqtt.min.js'></script>
<script>
$(document).ready(function() {
    client = new Paho.Client('<%= @broker[:server] %>', <%= @broker[:port] %>,'<%= @client_id %>');

    client.onConnectionLost = onConnectionLost; 
    client.onMessageArrived = onMessageArrived;

    let options = {
	useSSL: true,
	userName: '<%= @broker[:username] %>',
	password: '<%= @broker[:password] %>',
	onSuccess: onConnect,
	onFailure: onConnectFail,
	reconnect: true
    };

    client.connect(options); 
});

function onConnect() {
console.log('mqtt connected');
  [
<% @consume_ddcs.each do |ddc| %>
    '<%= ddc %>',
<% end %>
  ].forEach(function(ddc) {
    client.subscribe('homebus/device/+/' + ddc);
  });
}

function onConnectionLost(responseObject) {
    if (responseObject.errorCode !== 0) {
        console.log("onConnectionLost:" + responseObject.errorMessage);
    }
    console.log("connection lost");
}

function onConnectFail(e) {
    console.log(e);
    console.log("doFail");
}

function onMessageArrived(message) {
  console.log('mqtt msg', message);

  let data;
  try {
    data = JSON.parse(message.payloadString);
  } catch(error) {
    $('#monitor_table tbody').prepend('<tr><td>parse error</td><td></td><td><code>' + message.payloadString + '</code></d>'); 
    return;
  }

    let source, timestamp, ddc, payload, date;

    // is it a new style message?
    if(data["source"]) {
        source = data["source"];
        timestamp = data["timestamp"];
        try {
            ddc = data["contents"]["ddc"];
            payload = data["contents"]["payload"];
        } catch(error) {
          $('#monitor_table tbody').prepend('<tr><td>' + data['source'] + '</td><td>parse error</td><td><code>' + message.payloadString + '</code></d>'); 
          return;
        }
    }

  try {
    date = new Date(timestamp * 1000);
 } catch(error) {
    date = "invalid";
 }

  $('#monitor_table tbody').prepend('<tr><td>' + source + '</td><td>' + ddc + '</td><td>' + date + '</td><td><code>' + JSON.stringify(payload) + '</code></td></tr>');
}
</script>
